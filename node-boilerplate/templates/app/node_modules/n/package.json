{
  "name": "n",
  "description": "Interactively Manage All Your Node Versions",
  "version": "2.1.0",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "homepage": "https://github.com/tj/n",
  "bugs": {
    "url": "https://github.com/tj/n/issues"
  },
  "contributors": [
    {
      "name": "Travis Webb",
      "email": "me@traviswebb.com",
      "url": "tjw.io"
    },
    {
      "name": "Nimit Kalra",
      "email": "me@nimit.io",
      "url": "http://nimit.io"
    },
    {
      "name": "Troy Connor",
      "email": "troy0820@gmail.com",
      "url": "https://github.com/troy0820"
    }
  ],
  "keywords": [
    "nvm",
    "node",
    "version",
    "manager",
    "switcher",
    "node",
    "binary",
    "env"
  ],
  "bin": {
    "n": "./bin/n"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tj/n.git"
  },
  "preferGlobal": true,
  "os": [
    "!win32"
  ],
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "readme": "# n\n\n[![Join the chat at https://gitter.im/tj/n](https://img.shields.io/gitter/room/tj/n.svg?style=flat-square)](https://gitter.im/tj/n)\n[![npm](https://img.shields.io/npm/dt/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/dm/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/v/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/l/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n\nSimple flavour of node/iojs binary management, no subshells, no profile setup, no convoluted api, just _simple_.\n\n*Note: Does not work on Windows at the moment. Pull Requests are appreciated.*\n*If you are searching for the latest version below 2.x.x, check out the branch \"1.x.x\"*\n\n ![](https://i.cloudup.com/59cA8VEDae.gif)\n\n## Installation\n\nWith node/iojs already installed:\n\n    $ npm install -g n\n\nor, by cloning this repo and running:\n\n    $ make install\n\nto install `n` to subdirectory `bin/n` of the directory specified in environment variable `PREFIX`, which defaults to `/usr/local` (note that you will likely need `sudo` to install there).  \nTo change the default to, say, `$HOME`, i.e., to install `n` to `$HOME/bin/n`, run `PREFIX=$HOME make install`.  \n\nOnce installed, `n` downloads node/iojs versions to subdirectory `n/versions` of the directory specified in environment variable `N_PREFIX`, which defaults to `/usr/local`; the _active_ node/iojs version is installed directly in `N_PREFIX`.  \nTo change the default to, say, `$HOME`, prefix later calls to `n` with `N_PREFIX=$HOME ` or add `export N_PREFIX=$HOME` to your shell initialization file.\n\nAlternatively, consider third-party installer [n-install](https://github.com/mklement0/n-install), which allows installation directly from GitHub; for instance,\n\n    curl -L http://git.io/n-install | bash\n\nsets both `PREFIX` and `N_PREFIX` to `$HOME/n`, installs `n` to `$HOME/n/bin`, modifies the initialization files of supported shells to export `N_PREFIX` and add `$HOME/n/bin` to the `PATH`, and installs the latest stable node version.  \nAs a result, both `n` itself and all node/iojs versions it manages are hosted inside a single, optionally configurable directory, which you can later remove with the included `n-uninstall` script; script `n-update` updates `n` itself to the latest version - see the [n-install repo](https://github.com/mklement0/n-install) for details.\n\n### Installing Binaries\n\nInstall a few nodes:\n\n    $ n 0.8.14\n    $ n 0.8.17\n    $ n 0.9.6\n\nType `n` to prompt selection of an installed node. Use the up /\ndown arrow to navigate, and press enter or the right arrow to\nselect, or ^C to cancel:\n\n    $ n\n\n      0.8.14\n    Î¿ 0.8.17\n      0.9.6\n\nUse or install the latest official release:\n\n    $ n latest\n\nUse or install the stable official release:\n\n    $ n stable\n\nUse or install the latest LTS official release:\n\n    $ n lts\n\n### Removing Binaries\n\nRemove some versions:\n\n    $ n rm 0.9.4 v0.10.0\n\nInstead of using `rm` we can simply use `-`:\n\n    $ n - 0.9.4\n\n### Binary Usage\n\nWhen running multiple versions of node, we can target\nthem directly by asking `n` for the binary path:\n\n    $ n bin 0.9.4\n    /usr/local/n/versions/0.9.4/bin/node\n\nOr by using a specific version through `n`'s `use` sub-command:\n\n    $ n use 0.9.4 some.js\n\nwith flags:\n\n    $ n as 0.9.4 --debug some.js\n\n## Usage\n\n Output from `n --help`:\n\n    Usage: n [options/env] [COMMAND] [args]\n\n    Environments:\n     n [COMMAND] [args]            Uses default env (node)\n     n io [COMMAND]                Sets env as io\n\n    Commands:\n\n      n                              Output versions installed\n      n latest                       Install or activate the latest node release\n      n -a x86 latest                As above but force 32 bit architecture\n      n stable                       Install or activate the latest stable node release\n      n lts                          Install or activate the latest LTS node release\n      n <version>                    Install node <version>\n      n use <version> [args ...]     Execute node <version> with [args ...]\n      n bin <version>                Output bin path for <version>\n      n rm <version ...>             Remove the given version(s)\n      n --latest                     Output the latest node version available\n      n --stable                     Output the latest stable node version available\n      n --lts                        Output the latest LTS node version available\n      n ls                           Output the versions of node available\n\n    (iojs):\n\n      n io latest                    Install or activate the latest iojs release\n      n io -a x86 latest             As above but force 32 bit architecture\n      n io <version>                 Install iojs <version>\n      n io use <version> [args ...]  Execute iojs <version> with [args ...]\n      n io bin <version>             Output bin path for <version>\n      n io rm <version ...>          Remove the given version(s)\n      n io --latest                  Output the latest iojs version available\n      n io ls                        Output the versions of iojs available\n\n    Options:\n\n      -V, --version   Output current version of n\n      -h, --help      Display help information\n      -q, --quiet     Disable curl output (if available)\n      -d, --download  Download only\n      -a, --arch      Override system architecture\n\n    Aliases:\n\n      which   bin\n      use     as\n      list    ls\n      -       rm\n\n## Custom source\n\nIf you would like to use a project other than the official Node.js or io.js projects, you can use the special `n project [command]` which allows you to control the behavior of `n` using environment variables.\n\nExample:\n\nTo grab the latest io.js version but name it \"foo\" instead,\n\n      PROJECT_NAME=\"foo\" PROJECT_URL=\"https://iojs.org/dist/\" n project latest\n\nRequired Variables:\n\n* `PROJECT_NAME`: The name the project will be stored under\n* `PROJECT_URL`: The location to download the project from. Note, this must follow the same format as the io.js/Node.js repos\n\nOptional Variables:\n\n* `HTTP_USER`: The username if the `PROJECT_URL` is protected by basic authentication\n* `HTTP_PASSWORD`: The password if the `PROJECT_URL` is protected by basic authentication\n* `PROJECT_VERSION_CHECK`: Many custom projects keep the same version number as the Node.js release they are based on, and maintain their own separate version in process. This allows you to define a JavaScript variable that will be used to check for the version of the process, for example: `process.versions.node`\n\n## Custom architecture\n\nBy default `n` picks the binaries matching your system architecture, e.g. `n` will download 64 bit binaries for a 64 bit system. You can override this by using the `-a` or `--arch` option.\n\nDownload and use latest 32 bit version of node:\n\n    $ n --arch x86 latest\n\nDownload and use latest 32 bit version of iojs:\n\n    $ n io --arch x86 latest\n\n\n## Details\n\n `n` by default installs node to _/usr/local/n/versions_, from\n which it can see what you have currently installed, and activate previously installed versions of node when `n <version>` is invoked again.\n\n Activated nodes are then installed to the prefix _/usr/local_, which of course may be altered via the __N_PREFIX__ environment variable.\n\n To alter where `n` operates simply export __N_PREFIX__ to whatever you prefer.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "n@2.1.0",
  "dist": {
    "shasum": "58b7d31fce41d44f8714a54736d0eacdf719a920"
  },
  "_from": "n@",
  "_resolved": "https://registry.npmjs.org/n/-/n-2.1.0.tgz"
}
